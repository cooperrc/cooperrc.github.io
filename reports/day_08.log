Traceback (most recent call last):
  File "/home/ryan/.conda/envs/julia/lib/python3.10/site-packages/jupyter_cache/executors/utils.py", line 51, in single_nb_execution
    executenb(
  File "/home/ryan/.conda/envs/julia/lib/python3.10/site-packages/nbclient/client.py", line 1204, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
  File "/home/ryan/.conda/envs/julia/lib/python3.10/site-packages/nbclient/util.py", line 84, in wrapped
    return just_run(coro(*args, **kwargs))
  File "/home/ryan/.conda/envs/julia/lib/python3.10/site-packages/nbclient/util.py", line 62, in just_run
    return loop.run_until_complete(coro)
  File "/home/ryan/.conda/envs/julia/lib/python3.10/asyncio/base_events.py", line 641, in run_until_complete
    return future.result()
  File "/home/ryan/.conda/envs/julia/lib/python3.10/site-packages/nbclient/client.py", line 663, in async_execute
    await self.async_execute_cell(
  File "/home/ryan/.conda/envs/julia/lib/python3.10/site-packages/nbclient/client.py", line 965, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "/home/ryan/.conda/envs/julia/lib/python3.10/site-packages/nbclient/client.py", line 862, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
Symbolics.jacobian([Lsum.val], a)
------------------

Differentiation of expressions involving arrays and array variables is not yet supported.

Stacktrace:
  [1] error(s::String)
    @ Base ./error.jl:33
  [2] occursin_info(x::SymbolicUtils.Term{Real, Base.ImmutableDict{DataType, Any}}, expr::SymbolicUtils.Sym{Vector{Real}, Base.ImmutableDict{DataType, Any}})
    @ Symbolics ~/.julia/packages/Symbolics/1OrKJ/src/diff.jl:85
  [3] (::Symbolics.var"#133#135"{SymbolicUtils.Term{Real, Base.ImmutableDict{DataType, Any}}})(a::SymbolicUtils.Sym{Vector{Real}, Base.ImmutableDict{DataType, Any}})
    @ Symbolics ~/.julia/packages/Symbolics/1OrKJ/src/diff.jl:75
  [4] iterate
    @ ./generator.jl:47 [inlined]
  [5] _collect(c::Vector{Any}, itr::Base.Generator{Vector{Any}, Symbolics.var"#133#135"{SymbolicUtils.Term{Real, Base.ImmutableDict{DataType, Any}}}}, #unused#::Base.EltypeUnknown, isz::Base.HasShape{1})
    @ Base ./array.jl:744
  [6] collect_similar(cont::Vector{Any}, itr::Base.Generator{Vector{Any}, Symbolics.var"#133#135"{SymbolicUtils.Term{Real, Base.ImmutableDict{DataType, Any}}}})
    @ Base ./array.jl:653
  [7] map(f::Function, A::Vector{Any})
    @ Base ./abstractarray.jl:2849
  [8] occursin_info(x::SymbolicUtils.Term{Real, Base.ImmutableDict{DataType, Any}}, expr::SymbolicUtils.Term{Real, Nothing})
    @ Symbolics ~/.julia/packages/Symbolics/1OrKJ/src/diff.jl:75
  [9] (::Symbolics.var"#133#135"{SymbolicUtils.Term{Real, Base.ImmutableDict{DataType, Any}}})(a::SymbolicUtils.Term{Real, Nothing})
    @ Symbolics ~/.julia/packages/Symbolics/1OrKJ/src/diff.jl:75
 [10] iterate
    @ ./generator.jl:47 [inlined]
 [11] collect_to!(dest::Vector{Any}, itr::Base.Generator{Vector{SymbolicUtils.Symbolic{Real}}, Symbolics.var"#133#135"{SymbolicUtils.Term{Real, Base.ImmutableDict{DataType, Any}}}}, offs::Int64, st::Int64)
    @ Base ./array.jl:782
 [12] collect_to!(dest::Vector{Bool}, itr::Base.Generator{Vector{SymbolicUtils.Symbolic{Real}}, Symbolics.var"#133#135"{SymbolicUtils.Term{Real, Base.ImmutableDict{DataType, Any}}}}, offs::Int64, st::Int64)
    @ Base ./array.jl:790
 [13] collect_to_with_first!(dest::Vector{Bool}, v1::Bool, itr::Base.Generator{Vector{SymbolicUtils.Symbolic{Real}}, Symbolics.var"#133#135"{SymbolicUtils.Term{Real, Base.ImmutableDict{DataType, Any}}}}, st::Int64)
    @ Base ./array.jl:760
 [14] _collect(c::Vector{SymbolicUtils.Symbolic{Real}}, itr::Base.Generator{Vector{SymbolicUtils.Symbolic{Real}}, Symbolics.var"#133#135"{SymbolicUtils.Term{Real, Base.ImmutableDict{DataType, Any}}}}, #unused#::Base.EltypeUnknown, isz::Base.HasShape{1})
    @ Base ./array.jl:754
 [15] collect_similar(cont::Vector{SymbolicUtils.Symbolic{Real}}, itr::Base.Generator{Vector{SymbolicUtils.Symbolic{Real}}, Symbolics.var"#133#135"{SymbolicUtils.Term{Real, Base.ImmutableDict{DataType, Any}}}})
    @ Base ./array.jl:653
 [16] map(f::Function, A::Vector{SymbolicUtils.Symbolic{Real}})
    @ Base ./abstractarray.jl:2849
 [17] occursin_info(x::SymbolicUtils.Term{Real, Base.ImmutableDict{DataType, Any}}, expr::SymbolicUtils.Mul{Real, Int64, Dict{Any, Number}, Nothing})
    @ Symbolics ~/.julia/packages/Symbolics/1OrKJ/src/diff.jl:75
 [18] #133
    @ ~/.julia/packages/Symbolics/1OrKJ/src/diff.jl:75 [inlined]
 [19] iterate
    @ ./generator.jl:47 [inlined]
 [20] _collect(c::Vector{SymbolicUtils.Mul{Real, Int64, Dict{Any, Number}, Nothing}}, itr::Base.Generator{Vector{SymbolicUtils.Mul{Real, Int64, Dict{Any, Number}, Nothing}}, Symbolics.var"#133#135"{SymbolicUtils.Term{Real, Base.ImmutableDict{DataType, Any}}}}, #unused#::Base.EltypeUnknown, isz::Base.HasShape{1})
    @ Base ./array.jl:744
 [21] collect_similar(cont::Vector{SymbolicUtils.Mul{Real, Int64, Dict{Any, Number}, Nothing}}, itr::Base.Generator{Vector{SymbolicUtils.Mul{Real, Int64, Dict{Any, Number}, Nothing}}, Symbolics.var"#133#135"{SymbolicUtils.Term{Real, Base.ImmutableDict{DataType, Any}}}})
    @ Base ./array.jl:653
 [22] map(f::Function, A::Vector{SymbolicUtils.Mul{Real, Int64, Dict{Any, Number}, Nothing}})
    @ Base ./abstractarray.jl:2849
 [23] occursin_info(x::SymbolicUtils.Term{Real, Base.ImmutableDict{DataType, Any}}, expr::SymbolicUtils.Add{Real, Int64, Dict{Any, Number}, Nothing})
    @ Symbolics ~/.julia/packages/Symbolics/1OrKJ/src/diff.jl:75
 [24] expand_derivatives(O::SymbolicUtils.Term{Real, Nothing}, simplify::Bool; occurances::Nothing)
    @ Symbolics ~/.julia/packages/Symbolics/1OrKJ/src/diff.jl:137
 [25] expand_derivatives
    @ ~/.julia/packages/Symbolics/1OrKJ/src/diff.jl:132 [inlined]
 [26] jacobian(ops::Vector{SymbolicUtils.Add{Real, Int64, Dict{Any, Number}, Nothing}}, vars::OffsetArrays.OffsetVector{Num, Vector{Num}}; simplify::Bool)
    @ Symbolics ~/.julia/packages/Symbolics/1OrKJ/src/diff.jl:409
 [27] jacobian(ops::Vector{SymbolicUtils.Add{Real, Int64, Dict{Any, Number}, Nothing}}, vars::OffsetArrays.OffsetVector{Num, Vector{Num}})
    @ Symbolics ~/.julia/packages/Symbolics/1OrKJ/src/diff.jl:409
 [28] top-level scope
    @ In[19]:1
 [29] eval
    @ ./boot.jl:373 [inlined]
 [30] include_string(mapexpr::typeof(REPL.softscope), mod::Module, code::String, filename::String)
    @ Base ./loading.jl:1196
LoadError: Differentiation of expressions involving arrays and array variables is not yet supported.

